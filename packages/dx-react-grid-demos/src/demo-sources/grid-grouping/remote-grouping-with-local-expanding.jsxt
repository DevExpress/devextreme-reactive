import React, { useReducer, useState, useEffect } from 'react';<%&additionalImports%>
import {
  GroupingState,
  CustomGrouping,
} from '@devexpress/dx-react-grid';
import {
  Grid,
  VirtualTable,
  TableHeaderRow,
  TableGroupRow,
  GroupingPanel,
  DragDropProvider,
  Toolbar,
} from '@devexpress/dx-react-grid-<%&themeName%>';
<%&cssImports%>

import { Loading } from '../../../theme-sources/<%&themeName%>/components/loading';

const URL = 'https://js.devexpress.com/Demos/Mvc/api/DataGridWebApi/Orders';

const getRowId = row => row.OrderID;
const getChildGroups = groups => groups
  .map(group => ({ key: group.key, childRows: group.items }));

const initialState = {
  data: [],
  grouping: [],
  expandedGroups: [],
  tempGrouping: null,
  tempExpandedGroups: null,
  loading: true,
};

function reducer(state, { type, payload }) {
  const { grouping, expandedGroups, tempGrouping } = state;

  switch (type) {
    case 'CHANGE_GROUPING':
      return {
        ...state,
        loading: true,
        grouping: payload,
        tempGrouping: tempGrouping === null ? grouping : tempGrouping,
        tempExpandedGroups: expandedGroups,
      };
    case 'SET_EXPANDED_GROUPS':
      return {
        ...state,
        expandedGroups: payload,
      };
    case 'FETCH_SUCCESS':
      return {
        ...state,
        data: payload,
        tempGrouping: null,
        tempExpandedGroups: null,
        loading: false,
      };
    case 'FETCH_ERROR':
      return {
        ...state,
        loading: false,
      };
    default:
      return state;
  }
}

export default () => {
  const [state, dispatch] = useReducer(reducer, initialState);
  const [columns] = useState([
    { name: 'ShipCountry', title: 'Country' },
    { name: 'ShipCity', title: 'City' },
    { name: 'ShipAddress', title: 'Address' },
  ]);
  const { grouping, loading } = state;

  const changeGrouping = (value) => {
    dispatch({ type: 'CHANGE_GROUPING', payload: value });
  };

  const setExpandedGroups = (value) => {
    dispatch({ type: 'SET_EXPANDED_GROUPS', payload: value });
  };

  const getQueryString = () => {
    if (!grouping.length) return URL;

    const groupConfig = grouping
      .map(columnGrouping => ({
        selector: columnGrouping.columnName,
        isExpanded: true,
      }));
    return `${URL}?group=${JSON.stringify(groupConfig)}`;
  };

  const loadData = () => {
    if (!loading) return;

    const queryString = getQueryString();
    fetch(queryString, { mode: 'cors' })
      .then(response => response.json())
      .then((orders) => {
        dispatch({ type: 'FETCH_SUCCESS', payload: orders.data });
      })
      .catch(() => dispatch({ type: 'FETCH_ERROR' }));
  };

  useEffect(() => loadData());

  const {
    data, expandedGroups, tempGrouping, tempExpandedGroups,
  } = state;
  return (
    <<%&wrapperTag%><%&wrapperAttributes%> style={{ position: 'relative' }}>
      <Grid
        rows={data}
        columns={columns}
        getRowId={getRowId}
      >
        <DragDropProvider />
        <GroupingState
          grouping={grouping}
          onGroupingChange={changeGrouping}
          expandedGroups={expandedGroups}
          onExpandedGroupsChange={setExpandedGroups}
        />
        <CustomGrouping
          getChildGroups={getChildGroups}
          grouping={tempGrouping}
          expandedGroups={tempExpandedGroups}
        />
        <VirtualTable />
        <TableHeaderRow />
        <TableGroupRow />
        <Toolbar />
        <GroupingPanel />
      </Grid>
      {loading && <Loading />}
    </<%&wrapperTag%>>
  );
};
