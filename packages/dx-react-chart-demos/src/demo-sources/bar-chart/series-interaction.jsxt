import * as React from 'react';<%&additionalImports%>
import {
  Chart,
  BarSeries,
  ArgumentAxis,
  ValueAxis,
  Title,
  Legend,
  Tooltip,
} from '@devexpress/dx-react-chart-<%&themeName%>';
import * as d3Format from 'd3-format';
import { scaleBand } from '@devexpress/dx-chart-core';
import {
  ArgumentScale, Stack, Animation, EventTracker, HoverState, SelectionState,
} from '@devexpress/dx-react-chart';

import { annualVehiclesSales as data } from '../../../demo-data/data-vizualization';

const tooltipContentTitleStyle = {
  fontWeight: 'bold',
  paddingBottom: 0,
};
const tooltipContentBodyStyle = {
  paddingTop: 0,
};
const formatTooltip = d3Format.format(',.2r');
const TooltipContent = (props) => {
  const { targetItem, text, ...restProps } = props;
  return (
    <div>
      <div>
        <Tooltip.Content
          {...restProps}
          style={tooltipContentTitleStyle}
          text={targetItem.series}
        />
      </div>
      <div>
        <Tooltip.Content
          {...restProps}
          style={tooltipContentBodyStyle}
          text={formatTooltip(data[targetItem.point][targetItem.series])}
        />
      </div>
    </div>
  );
};

const titleTextStyle = { marginRight: '120px' };
const TitleText = props => <Title.Text {...props} style={titleTextStyle} />;

const formatInfo = (target) => {
  if (!target) {
    return '';
  }
  const { series, point } = target;
  const value = data[point][series];
  const argument = data[point].year;
  return `${series} : ${value} / ${argument}`;
};

const auxiliaryPaneStyle = { marginLeft: '70px' };
const auxiliaryRootStyle = { display: 'flex', flexDirection: 'row' };
const auxiliaryNameStyle = { width: '100px' };
const auxiliaryDataStyle = { width: '180px' };
const auxiliaryButtonStyle = { padding: '2px' };

const AuxiliaryRoot = props => <div style={auxiliaryRootStyle} {...props} />;
const AuxiliaryName = props => <span style={auxiliaryNameStyle} {...props} />;
const AuxiliaryData = props => <span style={auxiliaryDataStyle} {...props} />;
// eslint-disable-next-line jsx-a11y/anchor-has-content
const AuxiliaryButton = props => <a href="#" style={auxiliaryButtonStyle} {...props} />;

const AuxiliarySelection = ({
  target, clear, turnPrev, turnNext,
}) => (
  <AuxiliaryRoot>
    <AuxiliaryName>Selection</AuxiliaryName>
    <AuxiliaryData>{formatInfo(target)}</AuxiliaryData>
    <AuxiliaryButton onClick={clear}>clear</AuxiliaryButton>
    <AuxiliaryButton onClick={turnPrev}>&lt;</AuxiliaryButton>
    <AuxiliaryButton onClick={turnNext}>&gt;</AuxiliaryButton>
  </AuxiliaryRoot>
);

const AuxiliaryHover = ({ target }) => (
  <AuxiliaryRoot>
    <AuxiliaryName>Hover</AuxiliaryName>
    <AuxiliaryData>{formatInfo(target)}</AuxiliaryData>
  </AuxiliaryRoot>
);

const AuxiliaryTooltip = ({ enabled, toggle }) => (
  <AuxiliaryRoot>
    <AuxiliaryName>Tooltip</AuxiliaryName>
    <AuxiliaryData>&nbsp;</AuxiliaryData>
    <AuxiliaryButton onClick={toggle}>{enabled ? 'disable' : 'enable'}</AuxiliaryButton>
  </AuxiliaryRoot>
);

const encodeTarget = ({ series, point }) => (2 * point + Number(series === 'China'));
const decodeTarget = code => ({ series: code % 2 ? 'China' : 'USA', point: Math.floor(code / 2) });

const compareTargets = (
  { series, point }, { series: targetSeries, point: targetPoint },
) => series === targetSeries && point === targetPoint;

export default class Demo extends React.PureComponent {
  constructor(props) {
    super(props);

    this.state = {
      hover: null,
      selection: [],
      tooltipEnabled: true,
    };

    this.click = ({ targets }) => {
      const target = targets[0];
      if (target) {
        this.setState(({ selection }) => ({
          selection: selection[0] && compareTargets(selection[0], target) ? [] : [target],
        }));
      }
    };
    this.changeHover = hover => this.setState({ hover });

    this.clearSelection = () => this.setState({ selection: [] });
    this.turnPrevSelection = () => this.setState(({ selection }) => {
      const target = selection[0];
      if (!target) {
        return null;
      }
      const newTarget = decodeTarget(Math.max(encodeTarget(target) - 1, 0));
      return { selection: [newTarget] };
    });
    this.turnNextSelection = () => this.setState(({ selection }) => {
      const target = selection[0];
      if (!target) {
        return null;
      }
      const newTarget = decodeTarget(Math.min(encodeTarget(target) + 1, 2 * data.length - 1));
      return { selection: [newTarget] };
    });

    this.toggleTooltip = () => this.setState(({ tooltipEnabled }) => ({
      tooltipEnabled: !tooltipEnabled,
    }));
  }

  render() {
    const { hover, selection, tooltipEnabled } = this.state;

    return (
      <<%&wrapperTag%><%&wrapperAttributes%>>
        <Chart
          data={data}
        >
          <ArgumentScale factory={scaleBand} />
          <ArgumentAxis />
          <ValueAxis />

          <Title
            text="USA and Chinese annual sales of plug-in electric vehicles"
            textComponent={TitleText}
          />

          <BarSeries
            name="USA"
            valueField="USA"
            argumentField="year"
          />
          <BarSeries
            name="China"
            valueField="China"
            argumentField="year"
          />
          <Stack />
          <Legend />
          <EventTracker onClick={this.click} />
          <HoverState hover={hover} onHoverChange={this.changeHover} />
          {tooltipEnabled && <Tooltip contentComponent={TooltipContent} />}
          <SelectionState selection={selection} />
          <Animation />
        </Chart>
        <div style={auxiliaryPaneStyle}>
          <AuxiliarySelection
            target={selection[0]}
            clear={this.clearSelection}
            turnPrev={this.turnPrevSelection}
            turnNext={this.turnNextSelection}
          />
          <AuxiliaryHover target={hover} />
          <AuxiliaryTooltip
            enabled={tooltipEnabled}
            toggle={this.toggleTooltip}
          />
        </div>
      </<%&wrapperTag%>>
    );
  }
}
