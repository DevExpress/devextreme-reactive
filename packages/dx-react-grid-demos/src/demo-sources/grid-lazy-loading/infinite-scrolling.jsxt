import * as React from 'react';<%&additionalImports%>
import {
  VirtualTableState,
  createRowCache,
} from '@devexpress/dx-react-grid';
import {
  Grid,
  VirtualTable,
  TableHeaderRow,
} from '@devexpress/dx-react-grid-<%&themeName%>';

const VIRTUAL_PAGE_SIZE = 50;
const MAX_ROWS = 50000;
const URL = 'https://js.devexpress.com/Demos/WidgetsGalleryDataService/api/Sales';

const buildQueryString = (skip, take) => (
  `${URL}?requireTotalCount=true&skip=${skip}&take=${take}`
);
const getRowId = row => row.Id;

export default class Demo extends React.PureComponent {
  constructor(props) {
    super(props);

    this.state = {
      columns: [
        { name: 'Id', title: 'Id', getCellValue: row => row.Id },
        { name: 'Category', title: 'Category', getCellValue: row => row.ProductCategoryName },
        { name: 'Store', title: 'Store', getCellValue: row => row.StoreName },
        { name: 'Product', title: 'Product', getCellValue: row => row.ProductName },
        { name: 'Amount', title: 'Amount', getCellValue: row => row.SalesAmount },
      ],
      rows: [],
      tableColumnExtensions: [
        { columnName: 'Id', width: 80 },
        { columnName: 'Category', width: 220 },
        { columnName: 'Store', width: 220 },
        { columnName: 'Amount', width: 120 },
      ],
      skip: 0,
      requestedSkip: 0,
      take: VIRTUAL_PAGE_SIZE * 2,
      totalCount: MAX_ROWS,
      loading: false,
    };

    this.cache = createRowCache(VIRTUAL_PAGE_SIZE);
    const setRows = (skip, count, totalCount) => {
      const rows = this.cache.getRows(skip, count);
      this.setState({
        rows,
        skip,
        totalCount: totalCount < MAX_ROWS ? totalCount : MAX_ROWS,
        loading: false,
      });
    };

    this.getRemoteRows = (requestedSkip, take) => {
      this.setState({ requestedSkip, take });
    };

    this.loadData = () => {
      const {
        requestedSkip,
        take,
        loading,
      } = this.state;
      const query = buildQueryString(requestedSkip, take);
      if (query !== this.lastQuery && !loading) {
        const cached = this.cache.getRows(requestedSkip, take);
        if (cached.length === take) {
          setRows(requestedSkip, take);
        } else {
          this.setState({ loading: true });
          fetch(query)
            .then(response => response.json())
            .then(({ data, totalCount }) => {
              this.cache.setRows(requestedSkip, data);
              setRows(requestedSkip, take, totalCount);
            })
            .catch(() => this.setState({ loading: false }));
        }
        this.lastQuery = query;
      }
    };
  }

  componentDidMount() {
    this.loadData();
  }

  componentDidUpdate() {
    this.loadData();
  }

  render() {
    const {
      rows, columns, skip, totalCount, tableColumnExtensions, loading,
    } = this.state;

    return (
      <<%&wrapperTag%><%&wrapperAttributes%>>
        <Grid
          rows={rows}
          columns={columns}
          getRowId={getRowId}
        >
          <VirtualTableState
            infiniteScrolling
            loading={loading}
            totalRowCount={totalCount}
            pageSize={VIRTUAL_PAGE_SIZE}
            skip={skip}
            getRows={this.getRemoteRows}
          />
          <VirtualTable columnExtensions={tableColumnExtensions} />
          <TableHeaderRow />
        </Grid>
      </<%&wrapperTag%>>
    );
  }
}
