{"componentChunkName":"component---src-templates-page-jsx","path":"/react/grid/docs/guides/lazy-loading/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"react-grid---virtual-scrolling-with-remote-data-lazy-loading\"><a href=\"#react-grid---virtual-scrolling-with-remote-data-lazy-loading\" aria-label=\"react grid   virtual scrolling with remote data lazy loading permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Grid - Virtual Scrolling with Remote Data: Lazy Loading</h1>\n<p>Lazy loading enables the React Grid component to load row data in partsâ€”once rows enter the viewport.</p>\n<h2 id=\"related-plugins\"><a href=\"#related-plugins\" aria-label=\"related plugins permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Related Plugins</h2>\n<p>The following plugins implement lazy loading:</p>\n<ul>\n<li><a href=\"../reference/virtual-table-state.md\">VirtualTableState</a> - requests data from the server</li>\n<li><a href=\"../reference/virtual-table.md\">VirtualTable</a> - renders loaded rows</li>\n</ul>\n<p>Note that the <a href=\"./plugin-overview.md#plugin-order\">plugin order</a> is important.</p>\n<h2 id=\"basic-setup\"><a href=\"#basic-setup\" aria-label=\"basic setup permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Basic Setup</h2>\n<p>This feature functions only in <a href=\"controlled-and-uncontrolled-modes.md\">controlled mode</a>.</p>\n<p>Grid rows are loaded in pages. The Grid maintains only three pages at a time: the visible page and two neighboring pages. The number of rows on each page is specified by the <code class=\"language-text\">pageSize</code> property. The smaller the <code class=\"language-text\">pageSize</code> is, the more frequently the Grid requests rows. The total number of rows in the data set is specified in the <code class=\"language-text\">totalRowCount</code> property.</p>\n<p>Lazy loading is initiated by the <code class=\"language-text\">getRows</code> function that accepts the <code class=\"language-text\">skip</code> and <code class=\"language-text\">take</code> parameters. They specify how many rows to skip from the start of the data set and how many rows to load.</p>\n<p>The <code class=\"language-text\">loading</code> property should indicate whether there is an active request. Once the request is completed, pass the loaded rows to the <code class=\"language-text\">Grid</code> plugin's <code class=\"language-text\">rows</code> property. In addition, pass the <code class=\"language-text\">skip</code> value to the <code class=\"language-text\">VirtualTableState</code> plugin's <code class=\"language-text\">skip</code> property, so that the Grid can understand where to begin rendering rows.</p>\n<p>.embedded-demo({ \"path\": \"grid-lazy-loading/remote-data-basic\", \"showThemeSelector\": true })</p>\n<h2 id=\"row-caching\"><a href=\"#row-caching\" aria-label=\"row caching permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Row Caching</h2>\n<p>Row caching helps reduce the number of data requests. Call the <a href=\"../reference/create-row-cache.md\">createRowCache</a> function to instantiate the cache. You can use alternative cache implementations, such as the Apollo GraphQL cache or a custom implementation.</p>\n<p>If users are allowed to sort or filter rows, clear the row cache each time the sort or filter settings are changed. Filtering also requires the total number of rows to be returned in every response.</p>\n<p><em>NOTE: Debounce requests on filter change to avoid fetching data on each keystroke.</em></p>\n<p>In the following demo, the Grid allows you to sort and filter rows. Loaded rows are cached.</p>\n<p>.embedded-demo({ \"path\": \"grid-lazy-loading/remote-data\", \"showThemeSelector\": true })</p>\n<h2 id=\"infinite-scrolling\"><a href=\"#infinite-scrolling\" aria-label=\"infinite scrolling permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Infinite Scrolling</h2>\n<p>In infinite scrolling mode, rows are loaded in sequence. To enable this mode, set the <code class=\"language-text\">VirtualTableState</code> plugin's <code class=\"language-text\">infiniteScrolling</code> property to <code class=\"language-text\">true</code>.</p>\n<p>.embedded-demo({ \"path\": \"grid-lazy-loading/infinite-scrolling\", \"showThemeSelector\": true })</p>","fields":{"technology":"react/grid","section":"docs"},"frontmatter":{"title":""}}},"pageContext":{"slug":"react/grid/docs/guides/lazy-loading/"}},"staticQueryHashes":["3159585216","3662068265"]}