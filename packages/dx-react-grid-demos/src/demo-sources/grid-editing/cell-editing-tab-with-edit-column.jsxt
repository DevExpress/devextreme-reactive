import React, { useState } from 'react';<%&additionalImports%>
import { EditingState } from '@devexpress/dx-react-grid';
import {
  Grid,
  Table,
  TableHeaderRow,
  TableEditColumn,
  TableInlineCellEditing,
} from '@devexpress/dx-react-grid-<%&themeName%>';

import {
  generateRows,
  defaultColumnValues,
} from '../../../demo-data/generator';

const getRowId = row => row.id;

const FocusableCell = (props) => {
  const { onClick } = props;
  return (
    <Table.Cell {...props} tabIndex={0} onFocus={onClick} />
  );
};

export default () => {
  const [columns] = useState([
    { name: 'name', title: 'Name' },
    { name: 'gender', title: 'Gender' },
    { name: 'city', title: 'City' },
    { name: 'car', title: 'Car' },
  ]);
  const [rows, setRows] = useState(generateRows({
    columnValues: { id: ({ index }) => index, ...defaultColumnValues },
    length: 8,
  }));
  const [editingCells, setEditingCells] = useState([]);
  const [selectTextOnEditStart] = useState(true);

  const commitChanges = React.useCallback(({ added, changed, deleted }) => {
    let changedRows;
    if (added) {
      const startingAddedId = rows.length > 0
        ? Math.max(rows[rows.length - 1].id, rows[0].id) + 1
        : 0;
      changedRows = [
        ...added.map((row, index) => ({
          id: startingAddedId + index,
          ...row,
        })),
        ...rows,
      ];
      setEditingCells([{ rowId: startingAddedId, columnName: columns[0].name }]);
    }
    if (changed) {
      const rowIds = Object.keys(changed);
      if (rowIds.some(id => changed[id] !== undefined)) {
        changedRows = rows.map(row => (changed[row.id] ? { ...row, ...changed[row.id] } : row));
      }
    }
    if (deleted) {
      const deletedSet = new Set(deleted);
      changedRows = rows.filter(row => !deletedSet.has(row.id));
    }

    if (changedRows) {
      setRows(changedRows);
    }
  }, [rows]);

  const Command = React.useCallback((params) => {
    const { id } = params;
    if (id === 'add') {
      return (
        <TableEditColumn.Command
          {...params}
          onExecute={() => commitChanges({ added: [{}] })}
          tabIndex={-1}
        />
      );
    }
    return <TableEditColumn.Command {...params} tabIndex={-1} />;
  }, [commitChanges]);

  return (
    <<%&wrapperTag%><%&wrapperAttributes%>>
      <Grid
        rows={rows}
        columns={columns}
        getRowId={getRowId}
      >
        <EditingState
          onCommitChanges={commitChanges}
          editingCells={editingCells}
          onEditingCellsChange={setEditingCells}
        />
        <Table cellComponent={FocusableCell} />
        <TableHeaderRow />
        <TableInlineCellEditing
          selectTextOnEditStart={selectTextOnEditStart}
        />
        <TableEditColumn
          showAddCommand
          showDeleteCommand
          commandComponent={Command}
        />
      </Grid>
    </<%&wrapperTag%>>
  );
};
