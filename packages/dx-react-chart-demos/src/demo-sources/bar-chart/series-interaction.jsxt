import * as React from 'react';<%&additionalImports%>
import {
  Chart,
  BarSeries,
  ArgumentAxis,
  ValueAxis,
  Title,
  Legend,
  Tooltip,
} from '@devexpress/dx-react-chart-<%&themeName%>';
import * as d3Format from 'd3-format';
import { scaleBand } from '@devexpress/dx-chart-core';
import {
  ArgumentScale, Stack, Animation, EventTracker, HoverState, SelectionState,
} from '@devexpress/dx-react-chart';

import { annualVehiclesSales as data } from '../../../demo-data/data-vizualization';

const tooltipContentTitleStyle = {
  fontWeight: 'bold',
  paddingBottom: 0,
};
const tooltipContentBodyStyle = {
  paddingTop: 0,
};
const formatTooltip = d3Format.format(',.2r');
const TooltipContent = (props) => {
  const { targetItem, text, ...restProps } = props;
  return (
    <div>
      <div>
        <Tooltip.Content
          {...restProps}
          style={tooltipContentTitleStyle}
          text={targetItem.series}
        />
      </div>
      <div>
        <Tooltip.Content
          {...restProps}
          style={tooltipContentBodyStyle}
          text={formatTooltip(data[targetItem.point][targetItem.series])}
        />
      </div>
    </div>
  );
};

const titleTextStyle = { marginRight: '120px' };
const TitleText = props => <Title.Text {...props} style={titleTextStyle} />;

const formatInfo = ({ series, point }) => `${series}: ${data[point].year} - ${data[point][series]}`;
const infoRootStyle = { marginLeft: '70px' };
const infoPrimaryStyle = { fontWeight: 'bold' };
const infoSecondaryStyle = { fontWeight: 'italic' };
const Info = ({ hover, selection }) => {
  const selectionNode = (
    <span style={infoPrimaryStyle}>{selection ? formatInfo(selection) : 'N/A'}</span>
  );
  const hoverNode = (
    hover && <span style={infoSecondaryStyle}>{`( ${formatInfo(hover)} )`}</span>
  );
  return (
    <div style={infoRootStyle}>
      Focus | {selectionNode} {hoverNode}
    </div>
  );
};

const compareTargets = (
  { series, point }, { series: targetSeries, point: targetPoint },
) => series === targetSeries && point === targetPoint;

export default class Demo extends React.PureComponent {
  constructor(props) {
    super(props);

    this.state = {
      hover: null,
      selection: [],
    };

    this.click = ({ targets }) => {
      const target = targets[0];
      if (target) {
        this.setState(({ selection }) => ({
          selection: selection[0] && compareTargets(selection[0], target) ? [] : [target],
        }));
      }
    };
    this.changeHover = hover => this.setState({ hover });
  }

  render() {
    const { hover, selection } = this.state;

    return (
      <<%&wrapperTag%><%&wrapperAttributes%>>
        <Chart
          data={data}
        >
          <ArgumentScale factory={scaleBand} />
          <ArgumentAxis />
          <ValueAxis />

          <Title
            text="USA and Chinese annual sales of plug-in electric vehicles"
            textComponent={TitleText}
          />

          <BarSeries
            name="USA"
            valueField="USA"
            argumentField="year"
          />
          <BarSeries
            name="China"
            valueField="China"
            argumentField="year"
          />
          <Stack />
          <Legend />
          <EventTracker onClick={this.click} />
          <HoverState hover={hover} onHoverChange={this.changeHover} />
          <Tooltip contentComponent={TooltipContent} />
          <SelectionState selection={selection} />
          <Animation />
        </Chart>
        <Info hover={hover} selection={selection[0]} />
      </<%&wrapperTag%>>
    );
  }
}
