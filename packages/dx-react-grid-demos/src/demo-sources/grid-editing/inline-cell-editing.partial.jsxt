import React, { useState } from 'react';<%&additionalImports%>
<%&imports%>
import { EditingState } from '@devexpress/dx-react-grid';
import {
  Grid,
  Table,
  TableHeaderRow,
  TableInlineCellEditing,
  Toolbar,
} from '@devexpress/dx-react-grid-<%&themeName%>';
<%&cssImports%>
import {
  Plugin,
  Template,
  TemplatePlaceholder,
} from '@devexpress/dx-react-core';

import {
  generateRows,
  defaultColumnValues,
} from '../../../demo-data/generator';

const getRowId = row => row.id;

<%&body%>

const FocusableCell = ({ onClick, ...restProps }) => (
  <Table.Cell {...restProps} tabIndex={0} onFocus={onClick} />
);

export default () => {
  const [columns] = useState([
    { name: 'name', title: 'Name' },
    { name: 'gender', title: 'Gender' },
    { name: 'city', title: 'City' },
    { name: 'car', title: 'Car' },
  ]);
  const [rows, setRows] = useState(generateRows({
    columnValues: { id: ({ index }) => index, ...defaultColumnValues },
    length: 8,
  }));
  const [startEditAction, setStartEditAction] = useState('click');
  const [selectTextOnEditStart, setSelectTextOnEditStart] = useState(true);

  const commitChanges = ({ added, changed, deleted }) => {
    let changedRows;
    if (added) {
      const startingAddedId = rows.length > 0 ? rows[rows.length - 1].id + 1 : 0;
      changedRows = [
        ...rows,
        ...added.map((row, index) => ({
          id: startingAddedId + index,
          ...row,
        })),
      ];
    }
    if (changed) {
      changedRows = rows.map(row => (changed[row.id] ? { ...row, ...changed[row.id] } : row));
    }
    if (deleted) {
      const deletedSet = new Set(deleted);
      changedRows = rows.filter(row => !deletedSet.has(row.id));
    }
    setRows(changedRows);
  };

  return (
    <<%&wrapperTag%><%&wrapperAttributes%>>
      <Grid
        rows={rows}
        columns={columns}
        getRowId={getRowId}
      >
        <EditingState onCommitChanges={commitChanges} />
        <Table cellComponent={FocusableCell} />
        <TableHeaderRow />
        <Toolbar />
        <EditPropsPanel
          defaultAction={startEditAction}
          changeAction={setStartEditAction}
          isSelectText={selectTextOnEditStart}
          changeSelectText={setSelectTextOnEditStart}
        />
        <TableInlineCellEditing
          startEditAction={startEditAction}
          selectTextOnEditStart={selectTextOnEditStart}
        />
      </Grid>
    </<%&wrapperTag%>>
  );
};
