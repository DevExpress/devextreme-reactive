import * as React from 'react';<%&additionalImports%>
import {
  Chart,
  AreaSeries,
  BarSeries,
  SplineSeries,
  ScatterSeries,
  ArgumentAxis,
  ValueAxis,
  Title,
  Legend,
  Tooltip,
} from '@devexpress/dx-react-chart-<%&themeName%>';
import {
  ValueScale,
  Stack,
  Animation,
  EventTracker,
  HoverState,
} from '@devexpress/dx-react-chart';
import { HOVERED } from '@devexpress/dx-chart-core';
import { connectProps } from '@devexpress/dx-react-core';
import { format } from 'd3-format';

import { oilProduction } from '../../../demo-data/data-vizualization';

const consumptionSeriesName = 'Consumption';
const consumptionColor = '#7cb2b7';
const priceColor = '#efc564';

const makeLabel = (symbol, color) => ({ text, style, ...restProps }) => (
  <ValueAxis.Label
    text={`${text} ${symbol}`}
    style={{
      fill: color,
      ...style,
    }}
    {...restProps}
  />
);
const PriceLabel = makeLabel('$', priceColor);
const LabelWithThousand = makeLabel('k', consumptionColor);

const patchProps = ({ hoverIndex, ...props }) => ({
  state: props.index === hoverIndex ? HOVERED : null,
  ...props,
});

const BarPoint = props => (
  <BarSeries.Point {...patchProps(props)} />
);

const pointOptions = { size: 10 };

const areaPointStyle = { animation: null };
const AreaPoint = (props) => {
  const patched = patchProps(props);
  return patched.state
    ? <ScatterSeries.Point style={areaPointStyle} point={pointOptions} {...patched} />
    : null;
};

const AreaWithPoints = ({ state, ...props }) => (
  <React.Fragment>
    <AreaSeries.Path {...props} />
    <ScatterSeries.Path {...props} />
  </React.Fragment>
);

const SplinePoint = props => (
  <ScatterSeries.Point point={pointOptions} {...patchProps(props)} />
);

const SplineWithPoints = props => (
  <React.Fragment>
    <SplineSeries.Path {...props} />
    <ScatterSeries.Path {...props} />
  </React.Fragment>
);

const series = [
  { name: 'USA', key: 'usa', color: '#0070ff' },
  { name: 'Saudi Arabia', key: 'saudiArabia', color: '#d72e3d' },
  { name: 'Iran', key: 'iran', color: '#249d3d' },
  { name: 'Mexico', key: 'mexico', color: '#ffb90c' },
  { name: 'Russia', key: 'russia', color: '#1698af' },
  {
    name: consumptionSeriesName,
    key: 'consumption',
    color: consumptionColor,
    type: AreaSeries,
    series: AreaWithPoints,
    point: 'AreaPoint',
  },
  {
    name: 'Oil Price',
    key: 'price',
    color: priceColor,
    scale: 'price',
    type: SplineSeries,
    series: SplineWithPoints,
    point: 'SplinePoint',
  },
];

const legendRootStyle = {
  display: 'flex',
  margin: 'auto',
  flexDirection: 'row',
};
const LegendRoot = props => (
  <Legend.Root style={legendRootStyle} {...props} />
);

const legendItemStyle = {
  flexDirection: 'column',
};
const LegendItem = props => (
  <Legend.Item style={legendItemStyle} {...props} />
);

const legendLabelStyle = {
  whiteSpace: 'nowrap',
};
const LegendLabel = props => (
  <Legend.Label style={legendLabelStyle} {...props} />
);

const formatTooltip = format('.1f');
const tooltipSpanStyle = { padding: '5px' };
const TooltipContent = ({ data, text, style, ...props }) => {
  const textStyle = {
    ...style,
    paddingLeft: '5px',
    display: 'inline-block',
  };
  const items = series.map(({ color, key }) => {
    const val = data[key];
    return (
      <div key={key}>
        <svg width="10" height="10">
          <circle cx="5" cy="5" r="5" fill={color} />
        </svg>
        <Tooltip.Content style={textStyle} text={val ? formatTooltip(val) : 'N/A'} {...props} />
      </div>
    );
  });
  return (
    <React.Fragment>
      {items}
    </React.Fragment>
  );
};

const titleStyle = { marginRight: '120px' };
const stacks = [
  { series: series.filter(obj => !obj.type).map(obj => obj.name) },
];

const modifyOilDomain = domain => [domain[0], 2200];
const modifyPriceDomain = () => [0, 110];

const getHoverIndex = ({ target }) => (target ? target.point : -1);

export default class Demo extends React.PureComponent {
  constructor(props) {
    super(props);

    this.state = {
      data: oilProduction,
      target: null,
    };

    this.changeHover = target => this.setState({
      target: target ? { series: consumptionSeriesName, point: target.point } : null,
    });

    this.createComponents();
    this.createSeries();
  }

  componentDidUpdate(prevProps, prevState) {
    if (getHoverIndex(prevState) !== getHoverIndex(this.state)) {
      this.BarPoint.update();
      this.SplinePoint.update();
      this.AreaPoint.update();
      this.TooltipContent.update();
    }
  }

  createComponents() {
    const getHoverProps = () => ({
      hoverIndex: getHoverIndex(this.state),
    });
    this.BarPoint = connectProps(BarPoint, getHoverProps);
    this.SplinePoint = connectProps(SplinePoint, getHoverProps);
    this.AreaPoint = connectProps(AreaPoint, getHoverProps);

    this.TooltipContent = connectProps(TooltipContent, () => {
      const { data, target } = this.state;
      return { data: target ? data[target.point] : null };
    });
  }

  createSeries() {
    this.series = series.map(({
      name, key, color, type, scale, series: seriesComponent, point: pointComponent,
    }) => {
      const props = {
        key: name,
        name,
        valueField: key,
        argumentField: 'year',
        color,
        scaleName: scale || 'oil',
        pointComponent: pointComponent ? this[pointComponent] : this.BarPoint,
      };
      if (seriesComponent) {
        props.seriesComponent = seriesComponent;
      }
      const Series = type || BarSeries;
      return <Series {...props} />;
    });
  }

  render() {
    const { data, target } = this.state;

    return (
      <<%&wrapperTag%><%&wrapperAttributes%>>
        <Chart
          data={data}
        >
          <ValueScale
            name="oil"
            modifyDomain={modifyOilDomain}
          />
          <ValueScale
            name="price"
            modifyDomain={modifyPriceDomain}
          />

          <ArgumentAxis />
          <ValueAxis
            scaleName="oil"
            labelComponent={LabelWithThousand}
          />
          <ValueAxis
            scaleName="price"
            position="right"
            labelComponent={PriceLabel}
          />

          <Title
            text="Oil production vs Oil price"
            style={titleStyle}
          />

          {this.series}

          <Animation />
          <Legend
            position="bottom"
            rootComponent={LegendRoot}
            itemComponent={LegendItem}
            labelComponent={LegendLabel}
          />
          <Stack stacks={stacks} />
          <EventTracker />
          <HoverState
            hover={target}
            onHoverChange={this.changeHover}
          />
          <Tooltip
            targetItem={target}
            contentComponent={this.TooltipContent}
          />
        </Chart>
      </<%&wrapperTag%>>
    );
  }
}
