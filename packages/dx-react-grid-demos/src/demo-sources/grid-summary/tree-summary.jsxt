import React, { useState } from 'react';<%&additionalImports%>
import {
  SummaryState,
  TreeDataState,
  CustomTreeData,
  IntegratedSummary,
  DataTypeProvider,
} from '@devexpress/dx-react-grid';
import {
  Grid,
  VirtualTable,
  TableHeaderRow,
  TableTreeColumn,
  TableSummaryRow,
} from '@devexpress/dx-react-grid-<%&themeName%>';

import {
  generateRows,
  globalSalesValues,
} from '../../../demo-data/generator';

const CurrencyFormatter = ({ value }) => (
  value.toLocaleString('en-US', { style: 'currency', currency: 'USD' })
);

const CurrencyTypeProvider = props => (
  <DataTypeProvider
    formatterComponent={CurrencyFormatter}
    {...props}
  />
);

const getChildRows = (row, rootRows) => {
  const childRows = rootRows.filter(r => r.parentId === (row ? row.id : null));
  return childRows.length ? childRows : null;
};

export default () => {
  const [columns] = useState([
    { name: 'region', title: 'Region' },
    { name: 'sector', title: 'Sector' },
    { name: 'customer', title: 'Customer' },
    { name: 'product', title: 'Product' },
    { name: 'amount', title: 'Sale Amount' },
  ]);
  const [data] = useState(generateRows({
    columnValues: {
      id: ({ index }) => index,
      parentId: ({ index, random }) => (index > 0 ? Math.trunc((random() * index) / 2) : null),
      ...globalSalesValues,
    },
    length: 200,
  }));
  const [tableColumnExtensions] = useState([
    { columnName: 'region', width: 250 },
    { columnName: 'amount', align: 'right' },
  ]);
  const [totalSummaryItems] = useState([
    { columnName: 'region', type: 'count' },
  ]);
  const [treeSummaryItems] = useState([
    { columnName: 'region', type: 'count' },
    { columnName: 'amount', type: 'sum' },
  ]);
  const [currencyColumns] = useState(['amount']);

  return (
    <<%&wrapperTag%><%&wrapperAttributes%>>
      <Grid
        rows={data}
        columns={columns}
      >
        <CurrencyTypeProvider
          for={currencyColumns}
        />
        <TreeDataState />
        <SummaryState
          totalItems={totalSummaryItems}
          treeItems={treeSummaryItems}
        />
        <CustomTreeData
          getChildRows={getChildRows}
        />
        <IntegratedSummary />
        <VirtualTable
          columnExtensions={tableColumnExtensions}
        />
        <TableHeaderRow />
        <TableTreeColumn
          for="region"
        />
        <TableSummaryRow />
      </Grid>
    </<%&wrapperTag%>>
  );
};
