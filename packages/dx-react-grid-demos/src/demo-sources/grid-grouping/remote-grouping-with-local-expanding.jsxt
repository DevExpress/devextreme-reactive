import React, { useState, useEffect } from 'react';<%&additionalImports%>
import {
  GroupingState,
  CustomGrouping,
} from '@devexpress/dx-react-grid';
import {
  Grid,
  VirtualTable,
  TableHeaderRow,
  TableGroupRow,
  GroupingPanel,
  DragDropProvider,
  Toolbar,
} from '@devexpress/dx-react-grid-<%&themeName%>';

import { Loading } from '../../../theme-sources/<%&themeName%>/components/loading';

const URL = 'https://js.devexpress.com/Demos/Mvc/api/DataGridWebApi/Orders';

const getRowId = row => row.OrderID;
const getChildGroups = groups => groups
  .map(group => ({ key: group.key, childRows: group.items }));

export default () => {
  const [columns] = useState([
    { name: 'ShipCountry', title: 'Country' },
    { name: 'ShipCity', title: 'City' },
    { name: 'ShipAddress', title: 'Address' },
  ]);
  const [data, setData] = useState([]);
  const [grouping, setGrouping] = useState([]);
  const [tempGrouping, setTempGrouping] = useState(null);
  const [expandedGroups, setExpandedGroups] = useState([]);
  const [tempExpandedGroups, setTempExpandedGroups] = useState(null);
  const [loading, setLoading] = useState(true);

  const changeGrouping = (value) => {
    setTempGrouping(grouping);
    setTempExpandedGroups(expandedGroups);
    setGrouping(value);
    setLoading(true);
  };

  const getQueryString = () => {
    if (!grouping.length) return URL;

    const groupConfig = grouping
      .map(columnGrouping => ({
        selector: columnGrouping.columnName,
        isExpanded: true,
      }));
    return `${URL}?group=${JSON.stringify(groupConfig)}`;
  };

  const loadData = () => {
    if (!loading) return;

    const queryString = getQueryString();
    fetch(queryString, { mode: 'cors' })
      .then(response => response.json())
      .then((orders) => {
        setData(orders.data);
        setTempGrouping(null);
        setTempExpandedGroups(null);
        setLoading(false);
      })
      .catch(() => setLoading(false));
  };

  useEffect(() => loadData());

  return (
    <<%&wrapperTag%><%&wrapperAttributes%> style={{ position: 'relative' }}>
      <Grid
        rows={data}
        columns={columns}
        getRowId={getRowId}
      >
        <DragDropProvider />
        <GroupingState
          grouping={grouping}
          onGroupingChange={changeGrouping}
          expandedGroups={expandedGroups}
          onExpandedGroupsChange={setExpandedGroups}
        />
        <CustomGrouping
          getChildGroups={getChildGroups}
          grouping={tempGrouping}
          expandedGroups={tempExpandedGroups}
        />
        <VirtualTable />
        <TableHeaderRow />
        <TableGroupRow />
        <Toolbar />
        <GroupingPanel />
      </Grid>
      {loading && <Loading />}
    </<%&wrapperTag%>>
  );
};
