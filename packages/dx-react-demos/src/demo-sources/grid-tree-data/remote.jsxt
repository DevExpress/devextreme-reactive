import * as React from 'react';<%&additionalImports%>
import {
  TreeDataState,
  CustomTreeData,
} from '@devexpress/dx-react-grid';
import {
  Grid,
  VirtualTable,
  TableHeaderRow,
  TableTreeColumn,
} from '@devexpress/dx-react-grid-<%&themeName%>';

import { Loading } from '../../../theme-sources/<%&themeName%>/components/loading';

const URL = 'https://js.devexpress.com/Demos/Mvc/api/treeListData';
const ROOT_ID = '';

const getRowId = row => row.id;
const getChildRows = (row, rootRows) => {
  const childRows = rootRows.filter(r => r.parentId === (row ? row.id : ROOT_ID));
  if (childRows.length) {
    return childRows;
  }
  return row && row.hasItems ? [] : null;
};

export default class Demo extends React.PureComponent {
  constructor(props) {
    super(props);

    this.state = {
      columns: [
        { name: 'name', title: 'Name' },
        { name: 'size', title: 'Size', getCellValue: row => (row.size ? `${Math.ceil(row.size / 1024)} KB` : '') },
        { name: 'createdDate', title: 'Created Date', getCellValue: row => new Date(Date.parse(row.createdDate)).toLocaleString() },
        { name: 'modifiedDate', title: 'Modified Date', getCellValue: row => new Date(Date.parse(row.modifiedDate)).toLocaleString() },
      ],
      tableColumnExtensions: [
        { columnName: 'name', width: 400 },
        { columnName: 'size', width: 120, align: 'right' },
      ],
      expandedRowIds: [],
      loading: false,
      data: [],
    };

    this.changeExpandedRowIds = this.changeExpandedRowIds.bind(this);
  }
  componentDidMount() {
    this.loadData();
  }
  componentDidUpdate() {
    this.loadData();
  }
  changeExpandedRowIds(expandedRowIds) {
    this.setState({ expandedRowIds });
  }
  loadData() {
    const { expandedRowIds, data, loading } = this.state;

    if (loading) {
      return;
    }

    const rowIdsWithNotLoadedChilds = [ROOT_ID, ...expandedRowIds]
      .filter(rowId => data.findIndex(row => row.parentId === rowId) === -1);

    if (rowIdsWithNotLoadedChilds.length) {
      if (this.state.loading) return;
      this.setState({ loading: true });
      Promise.all(rowIdsWithNotLoadedChilds
        .map(rowId =>
          fetch(`${URL}?parentIds=${rowId}`, { mode: 'cors' })
            .then(response => response.json())))
        .then((loadedData) => {
          this.setState({
            data: data.concat(...loadedData),
            loading: false,
          });
        })
        .catch(() => this.setState({ loading: false }));
    }
  }
  render() {
    const {
      data, columns, tableColumnExtensions, expandedRowIds, loading,
    } = this.state;

    return (
      <<%&wrapperTag%> style={{ position: 'relative' }}>
        <Grid
          rows={data}
          columns={columns}
          getRowId={getRowId}
        >
          <TreeDataState
            expandedRowIds={expandedRowIds}
            onExpandedRowIdsChange={this.changeExpandedRowIds}
          />
          <CustomTreeData
            getChildRows={getChildRows}
          />
          <VirtualTable
            columnExtensions={tableColumnExtensions}
          />
          <TableHeaderRow />
          <TableTreeColumn
            for="name"
          />
        </Grid>
        {loading && <Loading />}
      </<%&wrapperTag%>>
    );
  }
}
