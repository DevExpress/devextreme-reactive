import * as React from 'react';<%&additionalImports%>
import {
  Chart,
  ArgumentAxis,
  ValueAxis,
  LineSeries,
} from '@devexpress/dx-react-chart-<%&themeName%>';
import { scaleTime } from 'd3-scale';
import { ZoomAndPan, ArgumentScale } from '@devexpress/dx-react-chart';

const generateData = (n) => {
  const ret = [];
  let y = 0;
  const dt = new Date(2017, 2, 10);
  for (let i = 0; i < n; i += 1) {
    y += Math.round(Math.random() * 10 - 5);
    ret.push({ x: new Date(dt.setDate(dt.getDate() + 1)), y });
  }
  return ret;
};
const data = generateData(100);

const getMode = (zoom, pan) => {
  if (zoom && pan) {
    return 'both';
  }
  if (zoom && !pan) {
    return 'zoom';
  }
  if (!zoom && pan) {
    return 'pan';
  }
  return 'none';
};

export default class Demo extends React.PureComponent {
  constructor(props) {
    super(props);

    this.state = {
      data,
      zoomValue: false,
      panValue: false,
      zoomArgument: true,
      panArgument: true,
    };
    this.submit = this.submit.bind(this);
  }

  submit() {
    const zoomValue = document.getElementById('zoomValue').checked;
    const panValue = document.getElementById('panValue').checked;
    const zoomArgument = document.getElementById('zoomArgument').checked;
    const panArgument = document.getElementById('panArgument').checked;
    this.setState({
      zoomValue,
      panValue,
      zoomArgument,
      panArgument,
    });
  }

  render() {
    const {
      data: chartData, zoomValue, panValue, zoomArgument, panArgument,
    } = this.state;
    return (
      <<%&wrapperTag%><%&wrapperAttributes%>>
        <Chart
          width={500}
          data={chartData}
        >
          <ArgumentScale factory={scaleTime} />
          <ArgumentAxis />
          <ValueAxis />

          <LineSeries valueField="y" argumentField="x" />
          <ZoomAndPan
            interactionWithArguments={getMode(zoomArgument, panArgument)}
            interactionWithValues={getMode(zoomValue, panValue)}
          />
        </Chart>
        <p>
          <label htmlFor="argument">
            <input type="checkbox" id="zoomArgument" checked={zoomArgument} onChange={this.submit} />
              Zoom argument
          </label>
        </p>
        <p>
          <label htmlFor="argument">
            <input type="checkbox" id="panArgument" checked={panArgument} onChange={this.submit} />
              Scroll argument
          </label>
        </p>
        <p>
          <label htmlFor="value">
            <input type="checkbox" id="zoomValue" checked={zoomValue} onChange={this.submit} />
            Zoom value
          </label>
        </p>
        <p>
          <label htmlFor="value">
            <input type="checkbox" id="panValue" checked={panValue} onChange={this.submit} />
            Scroll value
          </label>
        </p>
      </<%&wrapperTag%>>
    );
  }
}
