import * as React from 'react';
import * as PropTypes from 'prop-types';<%&additionalImports%>
import {
  FilteringState,
  IntegratedFiltering,
  DataTypeProvider,
} from '@devexpress/dx-react-grid';
import {
  Grid,
  Table,
  TableHeaderRow,
  TableFilterRow,
} from '@devexpress/dx-react-grid-<%&themeName%>';
import Input from 'material-ui/Input';
import { withStyles } from 'material-ui/styles';
import Android from '@material-ui/icons/Android'

import { generateRows, globalSalesValues } from '../../../demo-data/generator';

const FilterIcon = ({ type, ...restProps }) => {
  if (type === 'isSpring') return <Android />;
  return <TableFilterRow.Icon type={type} {...restProps} />
};

const styles = {
  inputRoot: {
    width: 'calc(100% - 48px)',
  },
  numericInput: {
    textAlign: 'right',
  },
};

const CurrencyEditorBase = ({ value, onValueChange, classes }) => {
  const handleChange = (event) => {
    const { value: targetValue } = event.target;
    if (targetValue.trim() === '') {
      onValueChange();
      return;
    }
    onValueChange(parseInt(targetValue, 10));
  };
  return (
    <Input
      type="number"
      classes={{
        root: classes.inputRoot,
        input: classes.numericInput,
      }}
      value={value === undefined ? '' : value}
      inputProps={{
        min: 0,
      }}
      onChange={handleChange}
    />
  );
};

CurrencyEditorBase.propTypes = {
  value: PropTypes.number,
  onValueChange: PropTypes.func.isRequired,
  classes: PropTypes.object.isRequired,
};

CurrencyEditorBase.defaultProps = {
  value: undefined,
};

const CurrencyEditor = withStyles(styles)(CurrencyEditorBase);

export default class Demo extends React.PureComponent {
  constructor(props) {
    super(props);

    this.state = {
      columns: [
        { name: 'customer', title: 'Customer' },
        { name: 'product', title: 'Product' },
        { name: 'saleDate', title: 'Sale Date' },
        { name: 'amount', title: 'Sale Amount' },
      ],
      dateColumns: ['saleDate'],
      currencyColumns: ['amount'],
      rows: generateRows({ columnValues: globalSalesValues, length: 8 }),
    };
  }
  render() {
    const { rows, columns, dateColumns, currencyColumns } = this.state;

    return (
      <<%&wrapperTag%>>
        <Grid
          rows={rows}
          columns={columns}
        >
          <DataTypeProvider
            for={dateColumns}
            availableFilterOperations={['contains', 'startsWith', 'endsWith', 'isSpring']}
          />
          <DataTypeProvider
            for={currencyColumns}
            availableFilterOperations={['equal', 'notEqual', 'greaterThan', 'greaterThanOrEqual', 'lessThan', 'lessThanOrEqual']}
            editorComponent={CurrencyEditor}
          />
          <FilteringState defaultFilters={[]} />
          <IntegratedFiltering />
          {/* <IntegratedFiltering columnExtensions={[{ columnName: 'sex', predicate: () => {}}]} /> */}

          <Table />
          <TableHeaderRow />
          <TableFilterRow
            iconComponent={FilterIcon}
            messages={{ isSpring: 'spring' }}
          />
        </Grid>
      </<%&wrapperTag%>>
    );
  }
}
