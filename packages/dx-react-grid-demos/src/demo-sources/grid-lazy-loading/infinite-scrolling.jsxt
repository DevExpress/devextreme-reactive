import React, { useState } from 'react';<%&additionalImports%>
import {
  VirtualTableState,
  createRowCache,
} from '@devexpress/dx-react-grid';
import {
  Grid,
  VirtualTable,
  TableHeaderRow,
} from '@devexpress/dx-react-grid-<%&themeName%>';

const VIRTUAL_PAGE_SIZE = 50;
const MAX_ROWS = 50000;
const URL = 'https://js.devexpress.com/Demos/WidgetsGalleryDataService/api/Sales';

const buildQueryString = (skip, take) => (
  `${URL}?requireTotalCount=true&skip=${skip}&take=${take}`
);
const getRowId = row => row.Id;

const Demo = () => {
  const [columns] = useState([
    { name: 'id', title: 'Id', getCellValue: row => row.Id },
    { name: 'category', title: 'Category', getCellValue: row => row.ProductCategoryName },
    { name: 'store', title: 'Store', getCellValue: row => row.StoreName },
    { name: 'product', title: 'Product', getCellValue: row => row.ProductName },
    { name: 'amount', title: 'Amount', getCellValue: row => row.SalesAmount },
  ]);
  const [rows, setRows] = useState([]);
  const [tableColumnExtensions] = useState([
    { columnName: 'id', width: 80 },
    { columnName: 'category', width: 220 },
    { columnName: 'store', width: 220 },
    { columnName: 'amount', width: 120 },
  ]);
  const [skip, setSkip] = useState(0);
  const [totalCount, setTotalCount] = useState(MAX_ROWS);
  const [loading, setLoading] = useState(true);

  const cache = createRowCache(VIRTUAL_PAGE_SIZE);
  const updateRows = (rowSkip, count, rowTotalCount) => {
    const newRows = cache.getRows(rowSkip, count);
    setRows(newRows);
    setSkip(rowSkip);
    setTotalCount(rowTotalCount < MAX_ROWS ? rowTotalCount : MAX_ROWS);
    setLoading(false);
  };

  const getRemoteRows = (rowSkip, take) => {
    const cached = cache.getRows(rowSkip, take);
    if (cached.length) {
      updateRows(rowSkip, take);
    } else {
      setLoading(true);
      const query = buildQueryString(rowSkip, take);
      fetch(query, { mode: 'cors' })
        .then(response => response.json())
        .then(({ data, rowTotalCount }) => {
          cache.setRows(rowSkip, data);
          updateRows(rowSkip, take, rowTotalCount);
        })
        .catch(() => setLoading(false));
    }
  };

  return (
    <<%&wrapperTag%><%&wrapperAttributes%>>
      <Grid
        rows={rows}
        columns={columns}
        getRowId={getRowId}
      >
        <VirtualTableState
          infiniteScrolling
          loading={loading}
          totalRowCount={totalCount}
          pageSize={VIRTUAL_PAGE_SIZE}
          skip={skip}
          getRows={getRemoteRows}
        />
        <VirtualTable columnExtensions={tableColumnExtensions} />
        <TableHeaderRow />
      </Grid>
    </<%&wrapperTag%>>
  );
};

export default Demo;
