{"componentChunkName":"component---src-templates-page-jsx","path":"/react/common/docs/guides/performance-optimization/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"react-components---optimize-performance\"><a href=\"#react-components---optimize-performance\" aria-label=\"react components   optimize performance permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Components - Optimize Performance</h1>\n<p>This article describes how to provide high performance for your application. Refer to the <a href=\"https://reactjs.org/docs/optimizing-performance.html\" target=\"_blank\" rel=\"noopener noreferrer\">React guidelines</a> for more information on performance optimization.</p>\n<h2 id=\"use-immutable-data-structures\"><a href=\"#use-immutable-data-structures\" aria-label=\"use immutable data structures permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use Immutable Data Structures</h2>\n<p>React Controls do not change data passed through a state and use memoization and <a href=\"https://reactjs.org/docs/react-api.html#reactpurecomponent\" target=\"_blank\" rel=\"noopener noreferrer\">React.PureComponents</a>. A <code class=\"language-text\">React.PureComponent</code> performs a shallow equality check to compare old and new state values. In this case, if you update a state object field, React does not update the component because it compares two references to the same object. Use immutable data structures to create a new state instance each time a state changes.</p>\n<p>Implement Control’s state management plugins as separate components and update their properties independently to optimize performance. This allows the Control to avoid rendering unchanged UI elements.</p>\n<p>In this case, you can use a state management library like <a href=\"https://redux.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Redux</a> to work with independent components’ states.</p>\n<p>The following demo shows how the <a href=\"https://devexpress.github.io/devextreme-reactive/react/grid\" target=\"_blank\" rel=\"noopener noreferrer\">React Grid</a> works with immutable data using Redux, <a href=\"https://github.com/reduxjs/react-redux\" target=\"_blank\" rel=\"noopener noreferrer\">react-redux</a> and <a href=\"https://github.com/rtfeldman/seamless-immutable\" target=\"_blank\" rel=\"noopener noreferrer\">seamless-immutable</a> libraries:</p>\n<p>.embedded-demo({ \"path\": \"grid-immutability/seamless-immutable\", \"showThemeSelector\": true, \"product\": \"grid\" })</p>\n<h2 id=\"avoid-declaring-statements-inside-render-methods\"><a href=\"#avoid-declaring-statements-inside-render-methods\" aria-label=\"avoid declaring statements inside render methods permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Avoid Declaring Statements Inside Render Methods</h2>\n<p>Do not declare functions and variables inside render methods. Otherwise, these functions and variables are declared each time a component is updated. The following example demonstrates how to override a default appointment template in the <a href=\"https://devexpress.github.io/devextreme-reactive/react/scheduler\" target=\"_blank\" rel=\"noopener noreferrer\">React Scheduler</a> control:</p>\n<p>.embedded-demo({ \"path\": \"scheduler-basic/simple-template\", \"showThemeSelector\": true, \"product\": \"scheduler\" })</p>\n<h2 id=\"access-the-parent-components-state-correctly\"><a href=\"#access-the-parent-components-state-correctly\" aria-label=\"access the parent components state correctly permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Access the Parent Component's State Correctly</h2>\n<p>Use a management library like <a href=\"https://redux.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Redux</a> to access the parent component's state. If you do not use such libraries in your application, we recommend that you use the <a href=\"../../../../react/core/docs/reference/connect-props.md\">connectProps</a> function available in the <code class=\"language-text\">@devexpress/dx-react-core</code> package.</p>\n<p>In the following example, <a href=\"https://devexpress.github.io/devextreme-reactive/react/chart\" target=\"_blank\" rel=\"noopener noreferrer\">React Chart</a> uses the <code class=\"language-text\">connectionProps</code>'s <code class=\"language-text\">update</code> method to update a legend label's style when the parent serie's hover state changes.</p>\n<p>.embedded-demo({ \"path\": \"chart-basic/chart-connect-props\", \"showThemeSelector\": true, \"product\": \"chart\" })</p>","fields":{"technology":"react/common","section":"docs"},"frontmatter":{"title":""}}},"pageContext":{"slug":"react/common/docs/guides/performance-optimization/"}},"staticQueryHashes":["3159585216","3662068265"]}