import * as React from 'react';<%&additionalImports%>
import {
  VirtualTableState,
  createRemoteRowsCache,
} from '@devexpress/dx-react-grid';
import {
  Grid,
  VirtualTable,
  TableHeaderRow,
} from '@devexpress/dx-react-grid-<%&themeName%>';

const getRowId = row => row.Id;
const VIRTUAL_PAGE_SIZE = 100;

export default class Demo extends React.PureComponent {
  constructor(props) {
    super(props);

    this.state = {
      columns: [
        { name: 'id', title: 'Id', getCellValue: row => row.Id },
        { name: 'store', title: 'Store', getCellValue: row => row.StoreName },
        { name: 'category', title: 'Category', getCellValue: row => row.ProductCategoryName },
        { name: 'product', title: 'Product', getCellValue: row => row.ProductName },
        { name: 'date', title: 'Date', getCellValue: row => row.DateKey },
        { name: 'price', title: 'Unit price', getCellValue: row => row.UnitPrice },
        { name: 'amount', title: 'Amount', getCellValue: row => row.SalesAmount },
      ],
      rows: [],
      tableColumnExtensions: [
        { columnName: 'id', width: 90 },
        { columnName: 'store', width: 220 },
        { columnName: 'category', width: 220 },
        { columnName: 'subcategory', width: 220 },
        { columnName: 'date', width: 150 },
        { columnName: 'amount', width: 120 },
        { columnName: 'price', width: 120 },
        { columnName: 'name15', width: 100 },
      ],
      start: 0,
      totalCount: 50000,
      loading: true,
    };

    const cache = createRemoteRowsCache(VIRTUAL_PAGE_SIZE);
    const url = 'https://js.devexpress.com/Demos/WidgetsGalleryDataService/api/Sales';

    const setRows = (start, count) => {
      const rows = cache.getRows(start, count);
      this.setState({
        rows,
        start,
        totalCount: 20000,
        loading: false,
      });
    };

    this.getRemoteRows = (skip, take) => {
      const cached = cache.getRows(skip, take);
      if (cached.length) {
        setRows(skip, take);
      } else {
        this.setState({ loading: true });
        const query = `${url}?requireTotalCount=true&skip=${skip}&take=${take}`;
        fetch(query, { mode: 'cors' })
          .then(response => response.json())
          .then((data) => {
            cache.setRows(skip, data.data);
            setRows(skip, take);
          })
          .catch(() => this.setState({ loading: false }));
      }
    };
  }

  render() {
    const {
      rows, columns, start, totalCount, tableColumnExtensions, loading,
    } = this.state;

    return (
      <<%&wrapperTag%><%&wrapperAttributes%>>
        <Grid
          rows={rows}
          columns={columns}
          getRowId={getRowId}
        >
          <VirtualTableState
            loading={loading}
            rowCount={totalCount}
            virtualPageSize={VIRTUAL_PAGE_SIZE}
            start={start}
            getRows={this.getRemoteRows}
          />
          <VirtualTable columnExtensions={tableColumnExtensions} />
          <TableHeaderRow />
        </Grid>
      </<%&wrapperTag%>>
    );
  }
}
