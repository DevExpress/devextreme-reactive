{"version":3,"sources":["webpack:///./src/templates/page.jsx"],"names":["Page","props","technology","data","markdownRemark","fields","demosScriptLink","withPrefix","replace","componentDidMount","this","demosScript","document","createElement","src","getElementsByTagName","appendChild","componentWillUnmount","window","deinitializeDemos","e","removeChild","getScriptPath","product","render","versionTag","html","section","content","match","p1","startsWith","endChar","includes","JSON","parse","options","path","scriptPath","stringify","process","VERSION_TAG","title","split","technologyName","sectionName","dangerouslySetInnerHTML","__html","React"],"mappings":"4KAaMA,E,YAaJ,WAAYC,GAAQ,IAAD,EACjB,cAAMA,IAAN,KAEA,IAA4CC,EAAqBD,EAAzDE,KAAQC,eAAkBC,OAAUH,WAH3B,OAKjB,EAAKI,gBAAkBC,qBAAW,WAAWL,EAAWM,QAAQ,IAAK,KAApC,aALhB,E,4CAQnBC,kBAAA,WACEC,KAAKC,YAAcC,SAASC,cAAc,UAC1CH,KAAKC,YAAYG,IAAMJ,KAAKJ,gBAC5BM,SAASG,qBAAqB,QAAQ,GAAGC,YAAYN,KAAKC,c,EAG5DM,qBAAA,WACE,IACEC,OAAOC,oBACP,MAAOC,IACTR,SAASG,qBAAqB,QAAQ,GAAGM,YAAYX,KAAKC,c,EAG5DW,cAAA,YAA4B,IAAZC,EAAW,EAAXA,QACd,OAAOA,EACHhB,qBAAW,iBAAiBgB,EAAlB,aACVb,KAAKJ,iB,EAGXkB,OAAA,WAAU,IA5CJC,EA4CG,OACP,EAAgFf,KAAKT,MAA7EE,KAAQC,eAAkBsB,EAAlC,EAAkCA,KAAlC,IAAwCrB,OAAUH,EAAlD,EAAkDA,WAAYyB,EAA9D,EAA8DA,QACxDC,EAAUF,EACblB,QACC,WACA,sDAEDA,QACC,mBACA,SAACqB,EAAOC,GACN,GAAIA,EAAGC,WAAW,SAAWD,EAAGC,WAAW,KACzC,MAAM,SAAUD,EAAhB,IAEF,IAAME,EAAUF,EAAGG,SAAS,KAAO,GAAK,IACxC,MAAM,YAAaH,EAAGtB,QAAQ,MAAO,IAAMwB,EAA3C,OAGHxB,QACC,gCACA,SAACqB,EAAOC,GACN,IAAM3B,EAAO+B,KAAKC,MAAML,GAClBM,EAAO,iBACRjC,EADQ,CAEXkC,KAAK,SAAUlC,EAAKkC,KACpBC,WAAY,EAAKhB,cAAcnB,KAEjC,MAAM,uEAEY+B,KAAKK,UAAUH,GAFjC,oLAUH5B,QACC,kBAjFAiB,EAAae,GAAYC,cACK,WAAfhB,EAAd,IAA4CA,EAAe,IAoF1DiB,EAAQd,EAAQe,MAAM,SAAS,GAAGA,MAAM,QAAQ,GAEtD,OACE,gBAAC,IAAD,CACEC,eAAgB1C,EAChB2C,YAAalB,GAEb,gBAAC,IAAD,CAAQe,MAAOA,IAEf,uBAAKI,wBAAyB,CAAEC,OAAQnB,O,GA1F7BoB,aAgGJhD","file":"component---src-templates-page-jsx-e07e97d51a4eaa138c4e.js","sourcesContent":["/* global document:true window:true */\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { graphql, withPrefix } from 'gatsby';\nimport Helmet from 'react-helmet';\nimport PageLayout from '../components/layouts/docs-page-layout';\n\nconst getNpmTag = () => {\n  const versionTag = process.env.VERSION_TAG;\n  return versionTag && versionTag !== 'latest' ? `@${versionTag}` : '';\n};\n\nclass Page extends React.Component {\n  static propTypes = {\n    data: PropTypes.shape({\n      markdownRemark: PropTypes.shape({\n        fields: PropTypes.shape({\n          technology: PropTypes.string.isRequired,\n          section: PropTypes.string.isRequired,\n        }),\n        html: PropTypes.string.isRequired,\n      }),\n    }).isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n\n    const { data: { markdownRemark: { fields: { technology } } } } = props;\n\n    this.demosScriptLink = withPrefix(`/static/${technology.replace('/', '-')}-demos.js`);\n  }\n\n  componentDidMount() {\n    this.demosScript = document.createElement('script');\n    this.demosScript.src = this.demosScriptLink;\n    document.getElementsByTagName('head')[0].appendChild(this.demosScript);\n  }\n\n  componentWillUnmount() {\n    try {\n      window.deinitializeDemos();\n    } catch (e) { /**/ }\n    document.getElementsByTagName('head')[0].removeChild(this.demosScript);\n  }\n\n  getScriptPath({ product }) {\n    return product\n      ? withPrefix(`/static/react-${product}-demos.js`)\n      : this.demosScriptLink;\n  }\n\n  render() {\n    const { data: { markdownRemark: { html, fields: { technology, section } } } } = this.props;\n    const content = html\n      .replace(\n        /<table>/g,\n        '<table class=\"table table-bordered table-striped\">',\n      )\n      .replace(\n        /href=\"([^\"]*)\"/g,\n        (match, p1) => {\n          if (p1.startsWith('http') || p1.startsWith('#')) {\n            return `href=\"${p1}\"`;\n          }\n          const endChar = p1.includes('#') ? '' : '/';\n          return `href=\"../${p1.replace('.md', '')}${endChar}\"`;\n        },\n      )\n      .replace(\n        /\\.embedded-demo\\(([^()]*)\\)/g,\n        (match, p1) => {\n          const data = JSON.parse(p1);\n          const options = {\n            ...data,\n            path: `/demo/${data.path}`,\n            scriptPath: this.getScriptPath(data),\n          };\n          return `<div\n            class=\"embedded-demo\"\n            data-options='${JSON.stringify(options)}'\n          >\n            <div class=\"loading-shading\">\n              <span class=\"glyphicon glyphicon-refresh loading-icon\"></span>\n            </div>\n          </div>`;\n        },\n      )\n      .replace(\n        /\\.npm-tag\\(\\)/g,\n        getNpmTag(),\n      );\n\n    const title = content.split('</h1>')[0].split('</a>')[1];\n\n    return (\n      <PageLayout\n        technologyName={technology}\n        sectionName={section}\n      >\n        <Helmet title={title} />\n        {/* eslint-disable-next-line react/no-danger */}\n        <div dangerouslySetInnerHTML={{ __html: content }} />\n      </PageLayout>\n    );\n  }\n}\n\nexport default Page;\n\nexport const query = graphql`\n  query($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      fields {\n        technology\n        section\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}