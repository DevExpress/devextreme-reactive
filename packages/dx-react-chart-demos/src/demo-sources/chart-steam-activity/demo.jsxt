import * as React from 'react';<%&additionalImports%>
import {
  Chart,
  BarSeries,
  ArgumentAxis,
  ValueAxis,
} from '@devexpress/dx-react-chart-<%&themeName%>';


const imageSize = 100;
const labelOffset = 10;

const data=  
    [{  
       "appid":'440',
       "image":'https://orig00.deviantart.net/5255/f/2011/184/6/5/team_fortress_2_a1_by_dj_fahr-d3kx960.png',
       "name":'',
       "player_count":''
    },
    {
      "appid":'570',
      "image":'https://www.havefun.pro/wp-content/uploads/2017/09/dota_2_icon_v2_by_kamizanon-d4x650d.png',
       "name":'',
       "player_count":''
    },
    {
      "appid":'271590',
      "image":'https://orig00.deviantart.net/8424/f/2015/059/5/8/gta_v_icon_v4_by_andonovmarko-d8jgbob.png',
       "name":'',
       "player_count":''
    },
    {
      "appid":'292030',
      "image":'http://pngimg.com/uploads/witcher/witcher_PNG38.png',
       "name":'',
       "player_count":''
    },
    {
      "appid":'730',
      "image":'https://www.freeiconspng.com/uploads/csgo-icon-4.png',
       "name":'',
       "player_count":''
    },
    {
      "appid":'578080',
      "image":'https://www.digiseller.ru/preview/400521/p1_2408467_21eb5a6e.png',
       "name":'',
       "player_count":''
    }
  ];
export default class Demo extends React.PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      data:data.slice()
    };
    this.getLabelWithAvatarComponent = this.getLabelWithAvatarComponent.bind(this);
  }
  componentDidMount() {
    this.getData();
  }
  componentDidUpdate() {
    this.getData();
  }
  getLabelWithAvatarComponent(props) {
    debugger
    const { text, x, y } = props;
    if (text === '') return <ArgumentAxis.Label {...props} y={y + imageSize} />;
    const contributor = this.state.data.find(({ name }) => name === text);
    return (
      <React.Fragment>
        <image
          href={contributor.image}
          width={imageSize}
          height={imageSize}
          transform={`translate(${x - (imageSize / 2)} ${y - labelOffset})`}
        />
        
      </React.Fragment>);
  }
  getPlayers(game_appid) {
     return fetch(`https://api.steampowered.com/ISteamUserStats/GetNumberOfCurrentPlayers/v1/?appid=${game_appid}`)
        .then(response => response.json())
        .then((data) => data.response.player_count);
      }
  getNames(game_appid) {
  
    return(fetch("http://api.steampowered.com/ISteamApps/GetAppList/v2")
          .then(response=>response.json())
          .then(data =>data.applist.apps)
          .then((app)=>{
            for(var i=0;i<app.length;i++){
            if(app[i].appid==game_appid){
              console.log(app[i].name);
              return app[i].name;
              }
            }
          })
          .catch(() => this.setState({ name: false })));
        }
  getData(){
    const promises=[];
    for(let i=0;i<data.length;i++){
      promises.push(this.getPlayers(data[i].appid).then((player_count)=>{data[i].player_count=player_count}));
      promises.push(this.getNames(data[i].appid).then((name)=>{data[i].name=name}));
        
    }
    Promise.all(promises).then(()=>{
      this.setState({data})});
    console.log(data);
  }

  render() {
    const {
      data
    } = this.state;
      console.log("state");
      console.log(data);
    return (
      <<%&wrapperTag%>>
        <Chart data={data}>
        <ArgumentAxis  
          type="band"
          labelComponent={this.getLabelWithAvatarComponent}
          tickComponent={() => null}
        />
        <ValueAxis 
        tickComponent={() => null}
        />
        <ValueAxis
        position="right" 
        tickComponent={() => null}
        />
        <BarSeries
            valueField='player_count'
            argumentField='name'
          />
      </Chart>
      </<%&wrapperTag%>>
    );
  }

}
