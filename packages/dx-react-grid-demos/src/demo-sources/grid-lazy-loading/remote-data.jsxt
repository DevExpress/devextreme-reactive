import React, { useState, useEffect, useMemo } from 'react';<%&additionalImports%>
import {
  VirtualTableState,
  DataTypeProvider,
  FilteringState,
  SortingState,
  createRowCache,
} from '@devexpress/dx-react-grid';
import {
  Grid,
  VirtualTable,
  TableHeaderRow,
  TableFilterRow,
} from '@devexpress/dx-react-grid-<%&themeName%>';
import { Loading } from '../../../theme-sources/<%&themeName%>/components/loading';

const VIRTUAL_PAGE_SIZE = 100;
const MAX_ROWS = 50000;
const URL = 'https://js.devexpress.com/Demos/WidgetsGalleryDataService/api/Sales';
const getRowId = row => row.Id;

const CurrencyFormatter = ({ value }) => (
  <b style={{ color: 'darkblue' }}>
$
    {value}
  </b>
);

const CurrencyTypeProvider = props => (
  <DataTypeProvider
    formatterComponent={CurrencyFormatter}
    {...props}
  />
);

const DateFormatter = ({ value }) => value.replace(/(\d{4})-(\d{2})-(\d{2})(T.*)/, '$3.$2.$1');

const DateTypeProvider = props => (
  <DataTypeProvider
    formatterComponent={DateFormatter}
    {...props}
  />
);

export default () => {
  const [columns] = useState([
    { name: 'Id', title: 'Id', getCellValue: row => row.Id },
    { name: 'ProductCategoryName', title: 'Category', getCellValue: row => row.ProductCategoryName },
    { name: 'StoreName', title: 'Store', getCellValue: row => row.StoreName },
    { name: 'ProductName', title: 'Product', getCellValue: row => row.ProductName },
    { name: 'DateKey', title: 'Date', getCellValue: row => row.DateKey },
    { name: 'SalesAmount', title: 'Amount', getCellValue: row => row.SalesAmount },
  ]);
  const [rows, setRows] = useState([]);
  const [tableColumnExtensions] = useState([
    { columnName: 'Id', width: 70 },
    { columnName: 'ProductCategoryName', width: 200 },
    { columnName: 'StoreName', width: 220 },
    { columnName: 'DateKey', width: 100 },
    { columnName: 'SalesAmount', width: 110 },
  ]);
  const [skip, setSkip] = useState(0);
  const [requestedSkip, setRequestedSkip] = useState(0);
  const [take, setTake] = useState(VIRTUAL_PAGE_SIZE * 2);
  const [totalCount, setTotalCount] = useState(MAX_ROWS);
  const [loading, setLoading] = useState(false);
  const [forceReload, setForceReload] = useState(false);
  const [filters, setFilters] = useState([]);
  const [sorting, setSorting] = useState([]);
  const [lastQuery, setLastQuery] = useState();

  const cache = useMemo(() => createRowCache(VIRTUAL_PAGE_SIZE), [VIRTUAL_PAGE_SIZE]);
  const updateRows = (newSkip, count, newTotalCount) => {
    const newRows = cache.getRows(newSkip, count);
    setRows(newRows);
    setSkip(newSkip);
    setTotalCount(newTotalCount < MAX_ROWS ? newTotalCount : MAX_ROWS);
    setLoading(false);
  };

  const getRemoteRows = (newRequestedSkip, newTake) => {
    setRequestedSkip(newRequestedSkip);
    setTake(newTake);
  };

  const buildQueryString = (querySkip, queryTake) => {
    const filterStr = filters
      .map(({ columnName, value, operation }) => (
        `["${columnName}","${operation}","${value}"]`
      )).join(',"and",');
    const sortingConfig = sorting
      .map(({ columnName, direction }) => ({
        selector: columnName,
        desc: direction === 'desc',
      }));
    const sortingStr = JSON.stringify(sortingConfig);
    const filterQuery = filterStr ? `&filter=${escape(filterStr)}` : '';
    const sortQuery = sortingStr ? `&sort=${escape(`${sortingStr}`)}` : '';

    return `${URL}?requireTotalCount=true&skip=${querySkip}&take=${queryTake}${filterQuery}${sortQuery}`;
  };

  const loadData = () => {
    const query = buildQueryString(requestedSkip, take);
    if ((query !== lastQuery || forceReload) && !loading) {
      if (forceReload) {
        cache.invalidate();
      }
      const cached = cache.getRows(requestedSkip, take);
      if (cached.length === take) {
        updateRows(requestedSkip, take);
      } else {
        setLoading(true);
        setForceReload(false);
        fetch(query)
          .then(response => response.json())
          .then(({ data, totalCount: newTotalCount }) => {
            cache.setRows(requestedSkip, data);
            updateRows(requestedSkip, take, newTotalCount);
          })
          .catch(() => setLoading(false));
      }
      setLastQuery(query);
    }
  };

  const changeFilters = (value) => {
    setFilters(value);
    setRows([]);
    setForceReload(true);
  };

  const changeSorting = (value) => {
    setSorting(value);
    setRows([]);
    setForceReload(true);
  };

  useEffect(() => loadData());

  return (
    <<%&wrapperTag%><%&wrapperAttributes%>>
      <Grid
        rows={rows}
        columns={columns}
        getRowId={getRowId}
      >
        <CurrencyTypeProvider for={['SalesAmount']} />
        <DateTypeProvider for={['DateKey']} />
        <VirtualTableState
          loading={loading}
          totalRowCount={totalCount}
          pageSize={VIRTUAL_PAGE_SIZE}
          skip={skip}
          getRows={getRemoteRows}
        />
        <SortingState
          sorting={sorting}
          onSortingChange={changeSorting}
        />
        <FilteringState
          filters={filters}
          onFiltersChange={changeFilters}
        />
        <VirtualTable columnExtensions={tableColumnExtensions} />
        <TableHeaderRow showSortingControls />
        <TableFilterRow />
      </Grid>
      {loading && <Loading />}
    </<%&wrapperTag%>>
  );
};
